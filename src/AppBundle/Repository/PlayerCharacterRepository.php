<?php

namespace AppBundle\Repository;
use AppBundle\Entity\Item;

/**
 * PlayerCharacterRepository
 *
 * This class was generated by the Doctrine ORM. Add your own custom
 * repository methods below.
 */
class PlayerCharacterRepository extends \Doctrine\ORM\EntityRepository
{
    /**
     * @param $playerCharacterId
     * @param $tradeSkillId
     *
     * @return bool
     */
    public function hasTradeSkill($playerCharacterId, $tradeSkillId)
    {
         $found = $this->createQueryBuilder('pc')
             ->select('pc.id')
             ->innerJoin('pc.tradeSkills', 'ts')
             ->where('pc.id = :player_character_id')
                 ->setParameter('player_character_id', $playerCharacterId)
             ->andWhere('ts.id = :trade_skill_id')
                 ->setParameter('trade_skill_id', $tradeSkillId)
             ->getQuery()
             ->getResult();

        return !empty($found);
    }

    /**
     * @param $playerCharacterId
     * @param $materialId
     *
     * @return bool
     */
    public function hasMaterial($playerCharacterId, $materialId)
    {
        $found = $this->createQueryBuilder('pc')
            ->select('pc.id')
            ->innerJoin('pc.materials', 'm')
            ->where('pc.id = :player_character_id')
            ->setParameter('player_character_id', $playerCharacterId)
            ->andWhere('m.id = :material_id')
            ->setParameter('material_id', $materialId)
            ->getQuery()
            ->getResult();

        return !empty($found);
    }

    /**
     * @param $playerCharacterId
     * @param $itemId
     *
     * @return bool
     */
    public function hasItem($playerCharacterId, $itemId)
    {
        /** @var Item $item */
        $item = $this->createQueryBuilder('pc')
            ->select('i.marking')
            ->innerJoin('pc.items', 'i')
            ->where('pc.id = :player_character_id')
                ->setParameter('player_character_id', $playerCharacterId)
            ->andWhere('i.id = :item_id')
                ->setParameter('item_id', $itemId)
            ->getQuery()
            ->getSingleResult();

        return isset($item['marking']['crafted']);
    }

    /**
     * @param $playerCharacterId
     * @param $playerzone
     *
     * @return mixed
     */
    public function findEnemyNear($playerCharacterId, $playerzone)
    {
        $enemies = $this->createQueryBuilder('pc')
            ->where('pc.id <> :player_character_id')
                ->setParameter('player_character_id', $playerCharacterId)
            ->andWhere('pc.health <> 0')
            ->andWhere('pc.fightingWith is null')
            ->andWhere('pc.mapZone = :map_zone')
                ->setParameter('map_zone', $playerzone)
            ->getQuery()
            ->getResult();

        if (empty($enemies)) {
            return [];
        }

        $index = array_rand($enemies, 1);

        return $enemies[$index];
    }
}
